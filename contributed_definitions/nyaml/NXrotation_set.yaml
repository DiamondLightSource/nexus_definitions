category: base
doc: |
  Base class to detail a set of rotations, orientations, and disorientations.
  
  For getting a more detailed insight into the discussion of the
  parameterized description of orientations in materials science see:
  
  * `H.-J. Bunge <https://doi.org/10.1016/C2013-0-11769-2>`_
  * `T. B. Britton et al. <https://doi.org/10.1016/j.matchar.2016.04.008>`_
  * `D. Rowenhorst et al. <https://doi.org/10.1088/0965-0393/23/8/083501>`_
  * `A. Morawiec <https://doi.org/10.1007/978-3-662-09156-2>`_
  
  Once orientations are defined one can continue to characterize the
  misorientation and specifically the disorientation which describes the
  rotation that is required to register the lattices of two oriented objects
  (like crystal lattice) into a crystallographic equivalent orientation:
  
  * `R. Bonnet <https://doi.org/10.1107/S0567739480000186>`_
  
  Based on the idea of this NXorientation_set one could equally formulate
  an NXdisorientation_set.

# This class stores a set of specifically parameterized NXtransformations which describe
# how each object is oriented/rotated with respect to a reference coordinate system.
# we should offer here support for d==2, d==3
symbols:
  doc: |
    The symbols used in the schema to specify e.g. dimensions of arrays.
  c: |
    The cardinality of the set, i.e. the number of value tuples.
type: group
NXrotation_set(NXobject):
  depends_on:
    doc: |
      Reference to an instance of NXem_conventions which contextualizes
      how the here reported parameterized quantities can be interpreted.
  # 2D rotations are a special type of 3D rotations and thus treated in 3D
  # just how to rotate the object into the reference frame defined by depends_on
  crystal_symmetry:
    doc: |
      Point group which defines the symmetry of the crystal.
      This has to be at least a single string.
      In the case that misorientation or disorientation fields are used
      and the two crystal sets resolve for phases with a different
      crystal symmetry, this field has to encode two string.
      In this case the first string is for phase A the second one for phase B.
      An example of this most complex case is the description of the
      disorientation between crystals adjoining a hetero-phase boundary.
    # how to encode the above (2,) string array or single string constraint
  sample_symmetry:
    doc: |
      Point group which defines an assumed symmetry imprinted upon processing
      the material/sample which could give rise to or may justify to use a
      simplified description of rotations, orientations, misorientations,
      and disorientations via numerical procedures known as symmetrization.
      
      The traditionally used symmetrization operations within the texture
      community in Materials Science, though, are thanks to methodology and
      software improvements no longer strictly needed. Therefore, users are
      encouraged to set the sample_symmetry to 1 (triclinic) and thus assume
      there is no implied additional processing symmetry imprinted.
      
      In practice one often faces situations where indeed these assumed
      symmetries are anyway not fully observed and thus an accepting of
      eventual inaccuracies just for the sake of reporting a simplified
      symmetrized description can be avoided.
  rotation_quaternion(NX_FLOAT):  # H \in SO3
    unit: NX_DIMENSIONLESS
    doc: |
      The set of rotations expressed in quaternion representation. The assumed
      crystal and sample symmetry point group is 1, triclinic. Rotations which
      should be interpreted as antipodal are not marked as such.
    dim: (c, 4)
  rotation_euler(NX_FLOAT):
    unit: NX_ANGLE
    doc: |
      The set of rotations expressed in Euler angle representation following
      the same applied symmetries as explained for rotation_quaternion.
      To interpret Euler angles correctly it is necessary to inspect the
      conventions behind depends_on to resolve which of the many Euler-angle
      conventions possible (Bunge ZXZ, XYZ, Kocks, Tait, etc.) were used.
    dim: (c, 3)
  # rotation_rodrigues(NX_FLOAT):
  # rotation_homochoric(NX_FLOAT):
  # rotation_axis_angle(NX_FLOAT):

  # orientation how to rotate the crystal into sample and vice versa obeying crystal and sample symmetry
  is_antipodal(NX_BOOLEAN):
    doc: |
     True for all those values which are considered antipodal, 
     false for those which are not considered antipodal.
    dim: (c,)
  orientation_quaternion(NX_FLOAT):
    unit: NX_DIMENSIONLESS
    doc: |
      The set of orientations expressed in quaternion representation and
      obeying symmetry for equivalent cases as detailed in crystal_symmetry
      and sample_symmetry. The supplementary field is_antipodal can be used
      to mark orientations which are antipodal.
    dim: (c, 4)
  orientation_euler(NX_FLOAT):
    unit: NX_ANGLE
    doc: |
      The set of orientations expressed in Euler angle representation following
      the same assumptions like for orientation_quaternion.
      To interpret Euler angles correctly it is necessary to inspect the
      conventions behind depends_on to resolve which of the many Euler-angle
      conventions possible (Bunge ZXZ, XYZ, Kocks, Tait, etc.) were used.
    dim: (c, 3)
  orientation_busing_levy(NX_FLOAT):
    unit: NX_ANGLE
    doc: |
      This will follow the Busing-Levy convention:
      W. R. Busing and H. A. Levy (1967). Acta Cryst. 22, 457-464
  ub_matrix(NX_FLOAT):
    doc: |
      UB matrix of single crystal sample using Busing-Levy convention:
      W. R. Busing and H. A. Levy (1967). Acta Cryst. 22, 457-464. This is
      the multiplication of the orientation_matrix, given above,
      with the :math:`B` matrix which
      can be derived from the lattice constants.
    dimensions:
      rank: 3
      dim: [[1, 3], [2, 3], [3, 3]]
  # orientation_rodrigues(NX_FLOAT):
  # orientation_homochoric(NX_FLOAT):
  # orientation_axis_angle(NX_FLOAT):

  # misorientation between two orientations, ignoring if the angular argument
  # is smallest.
  misorientation_quaternion(NX_FLOAT):
    unit: NX_DIMENSIONLESS
    doc: |
      The set of misorientations expressed in quaternion representation and
      obeying symmetry operations for equivalent misorientations
      as defined by crystal_symmetry and sample_symmetry.
    dim: (c, 4)
  misorientation_angle(NX_FLOAT):
    unit: NX_ANGLE
    doc: |
      Misorientation angular argument (eventually signed) following the same
      symmetry assumptions as expressed for the field misorientation_quaternion.
    dim: (c,)
  misorientation_axis(NX_FLOAT):
    unit: NX_DIMENSIONLESS
    doc: |
      Misorientation axis (normalized) and signed following the same
      symmetry assumptions as expressed for the field misorientation_angle.
    dim: (c, 3)

  # disorientation, misorientation with smallest angular argument inside
  # fundamental zone of SO3 for given crystal and sample symmetry
  disorientation_quaternion(NX_FLOAT):
    unit: NX_DIMENSIONLESS
    doc: |
      The set of disorientation expressed in quaternion representation and
      obeying symmetry operations for equivalent misorientations
      as defined by crystal_symmetry and sample_symmetry.
  disorientation_angle(NX_FLOAT):
    unit: NX_ANGLE
    doc: |
      Disorientation angular argument (should not be signed, see
      `D. Rowenhorst et al. <https://doi.org/10.1088/0965-0393/23/8/083501>`_)
      following the same symmetry assumptions as expressed for the field
      disorientation_quaternion.
    dim: (c,)
  disorientation_axis(NX_FLOAT):
    unit: NX_DIMENSIONLESS
    doc: |
      Disorientation axis (normalized) following the same symmetry assumptions
      as expressed for the field disorientation_quaternion.
    dim: (c, 3)
  # e.g. in this way one could easily, efficiently, store and map familiar habits of microscopists
  # to store e.g. orientations of measurement points or of grains via a (c := Ngrains, n_p := 3)
  # matrix of Bunge-Euler angles, or of (c := Ngrains, n_p := 4) matrix of quaternions.
  
  # the benefit of such a representation is that with a known NXorientation_set base class one can implement a common parameterization transformation library (of which several already exist) in the microstructure modelling communities so that a program can read the information in the (NXorientation_set) instance and automatically transform/compute between different parameterizations. Super relevant for interoperability e.g. in SEM/EBSD, where this was a long standing issue and right now the most frequently accepted consensus is to report either Bunge-Euler angles or quaternions and then use existent transformation libraries (as implemented by e.g. Marc de Graeff for SEM/EBSD and used by many but not yet the majority of people in the computational materials modelling community within crystal plasticity, crystal growth modeling, DREAM.3D)