category: base
doc: |
  Base class to document an algorithm for recovering charge state and nuclid composition of a (molecular) ion.
  
  Currently ranging definitions in the research field of atom probe face have limitations:
  
  1. A ranging definition maps all signal within a mass-to-charge-state-ratio value interval
     on one iontype. Facing limited mass-resolving-power there are mass-to-charge-state-ratio
     values, though, for which not only multiple (molecular) ions are indistinguishable but
     also for which the current practice of documenting classical ranging definitions is incomplete.
  2. Usually ranging definitions report exclusively the mass-to-charge-state-ratio intervals
     surplus for each interval the composition of elements that build the (molecular) ion.
     However, nuclid and charge state information is not necessarily reported.
  3. Therefore, classical ranging definitions demand a post-processing with an algorithm
     which can identify the nuclids from which the (molecular) ion is constructed and identify
     the charge state. Combinatorial algorithms are used for this purpose.
  
  This base class documents the parameter and results of such an algorithm.
symbols:
  doc: |
    The symbols used in the schema to specify e.g. dimensions of arrays.
  n_cand: |
    The number of also possible but different (molecular) ions.
  n_ivec_max: |
    Maximum number of allowed atoms per (molecular) ion (fragment).
type: group
NXapm_charge_state_analysis(NXprocess):
  doc: |
    Details and results of the combinatorial analyses of a ranging definition
    to clarify (if possible) the charge_state of an ion and its (not necessarily)
    unique combination of nuclids contained including their multiplicity.
  # input/config
  element_vector(NX_UINT):
    doc: |
      Input constraint, list of proton numbers for each element of the ranging
      definition. The list contains each element as many times as its multiplicity.
      As an example a ranging definition H:2 O:1 demands element vector
      to be 1, 1, 8. An empty list does not release the constraint.
      Instead, for this a list for all elements of the periodic table should be
      used. Keep in mind though with such a low constraint the parameter space
      is huge and thus the combinatorial analysis can become time consuming.
    unit: NX_UNITLESS
    dim: (i,)
  mass_to_charge_range(NX_FLOAT):
    doc: |
      Input constraint, interval within which (molecular) ions need to have the
      mass-to-charge-state-ratio such that the a ion qualifies as a candidate.
    unit: NX_ANY  # u
    dim: (1, 2)
  min_half_life(NX_FLOAT):
    doc: |
      Input constraint, minimum half life for how long each nuclid of each (molecular)
      ion needs to be stable such that the ion qualifies as a candidate.
    unit: NX_TIME
  min_abundance(NX_FLOAT):
    doc: |
      Input constraint, minimum natural abundance of each nuclid of each (molecular)
      ion such that the ion qualifies as a candidate.
    unit: NX_DIMENSIONLESS
  sacrifice_isotopic_uniqueness(NX_BOOLEAN):
    doc: |
      If the value is zero/false it means that non-unique solutions are accepted.
      These are solutions where multiple candidates may be build from different
      nuclids but the charge_state of all of them is the same.
  # min_abundance_product(NX_FLOAT):
  #   doc: |
  #     For each candidate TO BE DEFINED.
  #   unit: NX_DIMENSIONLESS
  #   dim: (n_cand,)
  # output/results
  # the n_cand can be 1 in which case all quantities below are scalar
  charge_state_vector(NX_INT):
    doc: |
      Charge state, i.e. integer multiple of the elementary charge.
    unit: NX_UNITLESS
    dim: (n_cand,)
  isotope_matrix(NX_UINT):
    doc: |
      List of nuclids building each candidate.
      Each list is sorted in descending order.
      Unused values up to n_ivec_max are zero-padded.
    unit: NX_UNITLESS
    dim: (n_cand, n_ivec_max)
  mass_vector(NX_FLOAT):
    doc: |
      Accumulated mass of the nuclids in each candidate.
      Not corrected for quantum effects.
    unit: NX_MASS
    dim: (n_cand,)
  natural_abundance_product_vector(NX_FLOAT):
    doc: |
      The product of the natural abundances of the nuclids for each candidate.
    unit: NX_DIMENSIONLESS
    dim: (n_cand,)
  min_half_life_vector(NX_FLOAT):
    doc: |
      For each candidate the half life of the nuclid with the shortst half life.
    unit: NX_TIME
    dim: (n_cand,)
